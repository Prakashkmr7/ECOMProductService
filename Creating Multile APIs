Creating 5 API :
I.) Fetching value with a particular ID.

GetProductByID API
1.)ProductController.java
	//Constructor Injection	
    private final ProductService productService; // immutable
    private final UserServiceClient userServiceClient;

    @Autowired // Autowired for constructor injection is optional from Spring 4.x+ onwards
    public ProductController(@Qualifier("productService") ProductService productService, UserServiceClient userServiceClient) {
        this.productService = productService;
        this.userServiceClient = userServiceClient;
    }


@GetMapping("/products/{id}")//whatever value will come PathVariable will inject that value into id
    public ResponseEntity getProductFromId(@PathVariable("id")int id)){
  ProductResponseDTO response = productService.getProductById(1);
        return ResponseEntity.ok(response);
    }

2.)FakeStoreProductServiceImpl.java
@Service("fakeStoreProductService")
public class FakeStoreProductServiceImpl implements ProductService{
    private RestTemplateBuilder restTemplateBuilder;

    public FakeStoreProductServiceImpl(RestTemplateBuilder restTemplateBuilder) {
        this.restTemplateBuilder = restTemplateBuilder;
    }


  @Override
    public ProductResponseDTO getProductById(int id) {
        String getAllProductsURL = "https://fakestoreapi.com/products/" + id;//This is the url of 3rd party 
        RestTemplate restTemplate = restTemplateBuilder.build();
        ResponseEntity<ProductResponseDTO> productResponse =
                restTemplate.getForEntity(getAllProductsURL, ProductResponseDTO.class);//RestTemplate return ResponseEntity
        return productResponse.getBody();
    }

3.)ProductService.java

public interface ProductService {
    ProductResponseDTO getProductById(int id);
    
}

4.)ProductServiceImpl.java

@Service("productService")
public class ProductServiceImpl implements ProductService{

    @Override
    public ProductResponseDTO getProductById(int id) {
        return null;
    }

   }

Note : JSON always return Array (not List).

API For Fetching all products :
1.)FakeStoreProductServiceImpl.java
@Service("fakeStoreProductService")
public class FakeStoreProductServiceImpl implements ProductService{
    private RestTemplateBuilder restTemplateBuilder;
    private FakeStoreAPIClient fakeStoreAPIClient;

    public FakeStoreProductServiceImpl(RestTemplateBuilder restTemplateBuilder, FakeStoreAPIClient fakeStoreAPIClient) {
        this.restTemplateBuilder = restTemplateBuilder;
        this.fakeStoreAPIClient = fakeStoreAPIClient;
    }

  @Override
    public ProductListResponseDTO getAllProducts() {
        String getAllProductsURL = "https://fakestoreapi.com/products";
        RestTemplate restTemplate = restTemplateBuilder.build();
        ResponseEntity<List<ProductResponseDTO[]>> productResponseArray =
                restTemplate.getForEntity(getAllProductsURL,ProductResponseDTO[].class);
        ProductResponseDTO productResponseDTO=new ProductResponseDTO();
        for(ProductResponseDTO productResponse:productResponseArray) {
            return productResponse.getProducts().add(productResponse);
        }
        return null;
    }
    /*
    Inside RestTemplate whenever we do getForEntity response type we need to pass is class type bcz JVM does not figure out which type it is in
    runtime so we need to specify ProductResponseDTO[].class
     */

2.)ProductListResponseDTO.java//to create an empty ArrayList using Constructor.
@Getter
@Setter
public class ProductListResponseDTO {
    private List<ProductResponseDTO> products;

    public ProductListResponseDTO() {
        this.products = new ArrayList<>();
    }
}

3.)ProductService.java

public interface ProductService {
    ProductListResponseDTO getAllProducts();
    }

4.)ProductServiceImpl.java 
@Service("productService")
public class ProductServiceImpl implements ProductService {
    private ProductRepository productRepository;
    private final UserServiceClient userServiceClient;

    public ProductServiceImpl(ProductRepository productRepository, UserServiceClient userServiceClient) {
        this.productRepository = productRepository;
        this.userServiceClient = userServiceClient;
    }

    @Override
    public ProductListResponseDTO getAllProducts() throws Exception {
        List<Product> products = productRepository.findAll();
        ProductListResponseDTO productListResponseDTO = ProductMapper.convertProductsToProductListResponseDTO(products);
        return productListResponseDTO;
    }
5.)ProductController.java
    public class ProductController {

    private final ProductService productService; // immutable
    private final UserServiceClient userServiceClient;

    @Autowired // Autowired for constructor injection is optional from Spring 4.x+ onwards
    public ProductController(@Qualifier("productService") ProductService productService, UserServiceClient userServiceClient) {
        this.productService = productService;
        this.userServiceClient = userServiceClient;
    }
@GetMapping("/products")
    public ResponseEntity getAllProducts(@RequestHeader("token") String token) throws Exception {
        ProductListResponseDTO response = productService.getAllProducts();
        return ResponseEntity.ok(response);
    }

III)Create Product API :-

1.)ProductRequestDTO.java
@Getter
@Setter
public class ProductRequestDTO {
    private String title;
    private double price;
    private String category;
    private String description;
    private String image;
}

2.)ProductController.java 
@PostMapping("/products")
    public ResponseEntity createProduct(@RequestBody ProductRequestDTO productRequestDTO){
        ProductResponseDTO responseDTO = productService.createProduct(productRequestDTO);
        return ResponseEntity.ok(responseDTO);
    }

3.)ProductService.java
public interface ProductService {
   
    ProductResponseDTO createProduct(ProductRequestDTO productRequestDTO);
}

4.)ProductServiceImpl.java

@Service("productService")
public class ProductServiceImpl implements ProductService {
    private ProductRepository productRepository;
    private final UserServiceClient userServiceClient;

    public ProductServiceImpl(ProductRepository productRepository, UserServiceClient userServiceClient) {
        this.productRepository = productRepository;
        this.userServiceClient = userServiceClient;
    }
@Override
    public ProductResponseDTO createProduct(ProductRequestDTO productRequestDTO) {
        return null;
    }



5.)FakeStoreProductServiceImpl.java
@Service("fakeStoreProductService")
public class FakeStoreProductServiceImpl implements ProductService{
    private RestTemplateBuilder restTemplateBuilder;
    private FakeStoreAPIClient fakeStoreAPIClient;

    public FakeStoreProductServiceImpl(RestTemplateBuilder restTemplateBuilder, FakeStoreAPIClient fakeStoreAPIClient) {
        this.restTemplateBuilder = restTemplateBuilder;
        this.fakeStoreAPIClient = fakeStoreAPIClient;
    }
 @Override
    public ProductResponseDTO createProduct(ProductRequestDTO productRequestDTO) {
         String createProductsURL = "https://fakestoreapi.com/products";
        RestTemplate restTemplate = restTemplateBuilder.build();
        ResponseEntity<ProductResponseDTO> productResponse =
                restTemplate.postForEntity(createProductsURL,productRequestDTO,ProductResponseDTO.class);//
/*
postForEntity - need uri, object ,class -(url , the requestBody,on which we want the response- here also single object) like in previous case.
Here it was an array -   restTemplate.getForEntity(getAllProductsURL,ProductResponseDTO[].class);
Here it was single object - restTemplate.getForEntity(getAllProductsURL, ProductResponseDTO.class);

*/

 productResponse.getBody();
    }

    }

IV) Delete One 

1.)ProductController.java 
@DeleteMapping("/products/{id}")
    public ResponseEntity deleteProduct(@PathVariable "id")int id){
       	boolean response=productService.deleteProduct(id); 
	return ResponseEntity.ok(response);
    }

 2.)
public interface ProductService {
  
    boolean deleteProduct(int id);//add this unimplemented method in class which is implementing this.
}


3.)fakeStoreProductService.java

@Service("fakeStoreProductService")
public class FakeStoreProductServiceImpl implements ProductService{
    private RestTemplateBuilder restTemplateBuilder;
    private FakeStoreAPIClient fakeStoreAPIClient;

    public FakeStoreProductServiceImpl(RestTemplateBuilder restTemplateBuilder, FakeStoreAPIClient fakeStoreAPIClient) {
        this.restTemplateBuilder = restTemplateBuilder;
        this.fakeStoreAPIClient = fakeStoreAPIClient;
    }

 @Override
    public boolean deleteProduct(int id) {
       @Override
    public ProductResponseDTO createProduct(ProductRequestDTO productRequestDTO) {
         String deleteProductsURL = "https://fakestoreapi.com/products";
        RestTemplate restTemplate = restTemplateBuilder.build();
	restTemplate.delete(deleteProductsURL);
       	return true;
    }

4.)ProductServiceImpl.java
@Service("productService")
public class ProductServiceImpl implements ProductService {
    private ProductRepository productRepository;
    private final UserServiceClient userServiceClient;

    public ProductServiceImpl(ProductRepository productRepository, UserServiceClient userServiceClient) {
        this.productRepository = productRepository;
        this.userServiceClient = userServiceClient;
    }

    @Override
    public boolean deleteProduct(int id) {
        return false;
    }




